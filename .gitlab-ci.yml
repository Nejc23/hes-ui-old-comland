image: $CI_REGISTRY/enerdat/tooling/node:latest

stages:
  - install
  - lint
  - test
  - build
  - upload
  - docker
  - deploy

.build: &build
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never
  before_script:
    - node -v && npm -v
    - npm ci
    - npm run postinstall
  script:
    - npx kendo-ui-license activate
    - npm run build-production:${CI_JOB_NAME}
  cache:
    key:
      files:
        - package.json
    paths:
      - node_modules
    policy: pull
  artifacts:
    name: "ePointHes.UI_$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - dist/${CI_JOB_NAME}/
    expire_in: 3 days

.deploy: &deploy
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    - when: never

.deploy_amera: &deploy_amera
  <<: *deploy
  needs: ["amera"]
  script:
    - .\upgrade.ps1 'C:\Program Files\Enerdat\ePointHES_UI' 'dist\amera'

.deploy_ePointHES: &deploy_ePointHES
  <<: *deploy
  needs: ["ePointHES"]
  script:
    - .\upgrade.ps1 'C:\Program Files\Enerdat\ePointHES_UI' 'dist\ePointHES'

.deploy_myGrid: &deploy_myGrid
  <<: *deploy
  needs: ["myGrid"]
  script:
    - .\upgrade.ps1 'C:\Program Files\Enerdat\ePointHES_UI' 'dist\myGrid'

.get_version: &get_version |
  export WEB_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')

.get-linux-docker-production-script: &get-linux-docker-production-script
  - curl --header "PRIVATE-TOKEN:${GITLAB_TOOLING_TOKEN}" ${CI_API_V4_URL}/projects/${GITLAB_TOOLING_ID}/repository/files/build-tools%2Fpublish-to-production.sh/raw?ref=master -o publish-to-production.sh
  - chmod +x ./publish-to-production.sh

Dependencies:
  stage: install
  script:
    - npm ci
    - npm run postinstall
  cache:
    key:
      files:
        - package.json
    paths:
      - node_modules
      - src/environments/version.ts
  only:
    changes:
      - package.json

ESLint:
  stage: lint
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "master" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never
  before_script:
    - npm ci
  script:
    - npx eslint --format gitlab src
  artifacts:
    reports:
      codequality: gl-codequality.json

Unit tests:
  stage: test
  script:
    - echo "I am just a placeholder for now :)"

amera:
  <<: *build

ePointHES:
  <<: *build

myGrid:
  <<: *build

upload-artifacts:
  stage: upload
  variables:
    RELEASE_VARIABLE: "alpha"
  rules:
    - if: '$CI_COMMIT_BRANCH == "release"'
      variables:
        RELEASE_VARIABLE: "official"
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        RELEASE_VARIABLE: "beta"
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - *get_version
    - echo "File name would be ePointHes.UI_myGrid-v${WEB_VERSION}-${RELEASE_VARIABLE}"
    - ls -l


docker-linux:
  stage: docker
  variables:
    DEPLOY_VARIABLE: "internal"
  rules:
    - if: '$CI_COMMIT_BRANCH == "release"'
      variables:
        DEPLOY_VARIABLE: "release"
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        DEPLOY_VARIABLE: "develop"
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - *get_version
    - echo "Current version ${WEB_VERSION}"
    - export DOCKER_TAG=${DEPLOY_VARIABLE}_linux_${WEB_VERSION}_${CI_COMMIT_SHORT_SHA}
    - echo "DOCKER_TAG=${DOCKER_TAG}" >> docker.env
    - echo "Preparing Linux Docker images for version $WEB_VERSION with tag $DOCKER_TAG"
    - ./docker-build.sh $DOCKER_TAG $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $CI_REGISTRY $CI_REGISTRY_IMAGE
    - echo "Clean up unused Docker images"
    - docker system prune -a -f
  artifacts:
    reports:
      dotenv: docker.env
  tags:
    - linux-build

docker:publish-azure:
  stage: deploy
  image: $CI_REGISTRY/enerdat/tooling/build:0.6.2
  needs: 
    - job: docker-linux
      artifacts: true
  variables:
    GIT_STRATEGY: none
  rules:
    - if: '$CI_COMMIT_BRANCH == "release"'
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - *get-linux-docker-production-script
    - ./publish-to-production.sh ${DOCKER_TAG} ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_USER} ${CI_JOB_TOKEN} ${AZURE_REGISTRY_URL} ${AZURE_USERNAME} ${AZURE_PASSWORD} frontend

DEV - Amera:
  <<: *deploy_amera
  environment:
    name: development
  tags:
    - comlandDeploy

DEV - HES:
  <<: *deploy_ePointHES
  environment:
    name: development
  tags:
    - comlandDeploy

DEV - myGrid:
  <<: *deploy_myGrid
  environment:
    name: development
  tags:
    - comlandDeploy

TEST03 - Amera:
  <<: *deploy_amera
  environment:
    name: test03
  tags:
    - Sisrvtest03Deploy

TEST03 - HES:
  <<: *deploy_ePointHES
  environment:
    name: test03
  tags:
    - Sisrvtest03Deploy

TEST03 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: test03
  tags:
    - Sisrvtest03Deploy

TEST04 - Amera:
  <<: *deploy_amera
  environment:
    name: test04
  tags:
    - Sisrvtest04Deploy

TEST04 - HES:
  <<: *deploy_ePointHES
  environment:
    name: test04
  tags:
    - Sisrvtest04Deploy

TEST04 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: test04
  tags:
    - Sisrvtest04Deploy

TEST05 - Amera:
  <<: *deploy_amera
  environment:
    name: test05
  tags:
    - sisrvtest05

TEST05 - HES:
  <<: *deploy_ePointHES
  environment:
    name: test05
  tags:
    - sisrvtest05

TEST05 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: test05
  tags:
    - sisrvtest05

QA - Amera:
  <<: *deploy_amera
  environment:
    name: qa/SISRVDEVLOP04
  tags:
    - QAServer

QA - HES:
  <<: *deploy_ePointHES
  environment:
    name: qa/SISRVDEVLOP04
  tags:
    - QAServer

QA - myGrid:
  <<: *deploy_myGrid
  environment:
    name: qa/SISRVDEVLOP04
  tags:
    - QAServer

DEVELOP03 - Amera:
  <<: *deploy_amera
  environment:
    name: qa/SISRVDEVELOP03
  tags:
    - SISRVDEVELOP03

DEVELOP03 - HES:
  <<: *deploy_ePointHES
  environment:
    name: qa/SISRVDEVELOP03
  tags:
    - SISRVDEVELOP03

DEVELOP03 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: qa/SISRVDEVELOP03
  tags:
    - SISRVDEVELOP03

INNOGY01 - Amera:
  <<: *deploy_amera
  environment:
    name: innogy01
  tags:
    - Sisrvinnogy01Deploy

INNOGY01 - HES:
  <<: *deploy_ePointHES
  environment:
    name: innogy01
  tags:
    - Sisrvinnogy01Deploy

INNOGY01 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: innogy01
  tags:
    - Sisrvinnogy01Deploy

STAGING - Amera:
  <<: *deploy_amera
  environment:
    name: staging
  tags:
    - devWindowsDeploy

STAGING - HES:
  <<: *deploy_ePointHES
  environment:
    name: staging
  tags:
    - devWindowsDeploy

STAGING - myGrid:
  <<: *deploy_myGrid
  environment:
    name: staging
  tags:
    - devWindowsDeploy

TEAMADV01 - Amera:
  <<: *deploy_amera
  environment:
    name: TeamAdv01
  tags:
    - QATeamAdv01Deploy

TEAMADV01 - HES:
  <<: *deploy_ePointHES
  environment:
    name: TeamAdv01
  tags:
    - QATeamAdv01Deploy

TEAMADV01 - myGrid:
  <<: *deploy_myGrid
  environment:
    name: TeamAdv01
  tags:
    - QATeamAdv01Deploy
